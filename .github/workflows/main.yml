name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev libasound2-dev libssl-dev pkg-config libswresample-dev libavformat-dev libswscale-dev libx11-dev libxext-dev libxv-dev liblzma-dev

      - name: Set environment variables
        run: echo "LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable-x86_64-gnu
          override: true

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Sync node version and setup cache
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Download static-lib
        uses: suisei-cn/actions-download-file@v1.3.0
        id: download-static-lib
        with:
          url: "https://files-cf.phira.cn/prpr-avc-static-lib.tar.gz"
          target: ./

      - name: Mkdir static-lib
        run: mkdir static-lib

      - name: Extract static-lib
        uses: a7ul/tar-action@v1.1.0
        id: extract-static-lib
        with:
          command: x
          cwd: ./static-lib
          files: prpr-avc-static-lib.tar.gz

      - name: Download and set up Android Studio command line tools
        run: |
         wget https://dl.google.com/dl/android/studio/ide-zips/2023.1.1.23/android-studio-2023.1.1.23-linux.tar.gz -O android-studio.tar.gz
         tar -xzf android-studio.tar.gz -C $HOME
         echo "ANDROID_STUDIO_HOME=$HOME/android-studio" >> $GITHUB_ENV
         echo "PATH=$PATH:$ANDROID_STUDIO_HOME/bin" >> $GITHUB_ENV
         wget https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip -O commandlinetools.zip
         mkdir -p $HOME/android-sdk/cmdline-tools
         unzip commandlinetools.zip -d $HOME/android-sdk/cmdline-tools
         mv $HOME/android-sdk/cmdline-tools/cmdline-tools $HOME/android-sdk/cmdline-tools/latest
         echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
         echo "PATH=$PATH:$HOME/android-sdk/cmdline-tools/latest/bin:$HOME/android-sdk/platform-tools" >> $GITHUB_ENV
         yes | $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses
         $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT "platforms;android-30" "build-tools;34.0.0" "ndk;27.2.12479018"
         ls -lR $ANDROID_SDK_ROOT/ndk

      - name: Manually download and set up NDK
        run: |
         wget https://dl.google.com/android/repository/android-ndk-r27c-linux.zip -O android-ndk.zip
         unzip android-ndk.zip -d $HOME/android-sdk/ndk
         echo "ANDROID_NDK_HOME=$HOME/android-sdk/ndk/android-ndk-r27c" >> $GITHUB_ENV
         echo "PATH=$PATH:$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_ENV
         ls -lR $ANDROID_NDK_HOME
         
      - name: Install Rust toolchain for Android
        run: |
          rustup target add aarch64-linux-android
          rustup target add armv7-linux-androideabi

      - name: Build the Rust project 
        run: cargo build --release

      - name: Build APK
        run: ./gradlew assembleRelease

      - name: Upload APK as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: phira-apk
          path: app/build/outputs/apk/release/app-release.apk
